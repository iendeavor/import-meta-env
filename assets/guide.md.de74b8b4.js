import{_ as s,c as a,o as n,a as e}from"./app.4c472213.js";const u='{"title":"Guide","description":"","frontmatter":{},"headers":[{"level":2,"title":"Getting Started","slug":"getting-started"},{"level":3,"title":"The .env.example File","slug":"the-env-example-file"},{"level":3,"title":"Installation","slug":"installation"},{"level":3,"title":"Using Environment Variables","slug":"using-environment-variables"},{"level":2,"title":"Extra Topics","slug":"extra-topics"},{"level":3,"title":"Local Development","slug":"local-development"},{"level":3,"title":"Sensitive Environment Variables","slug":"sensitive-environment-variables"},{"level":3,"title":"IntelliSense for TypeScript","slug":"intellisense-for-typescript"},{"level":2,"title":"Framework-specific Notes","slug":"framework-specific-notes"},{"level":3,"title":"Vite","slug":"vite"},{"level":2,"title":"FAQ","slug":"faq"},{"level":3,"title":"Why use ImportMeta?","slug":"why-use-importmeta"},{"level":3,"title":"Boolean Values","slug":"boolean-values"},{"level":3,"title":"Changes to environment variables is not updated","slug":"changes-to-environment-variables-is-not-updated"},{"level":3,"title":"Can I have multiple .env files?","slug":"can-i-have-multiple-env-files"},{"level":3,"title":"Should I commit my .env file?","slug":"should-i-commit-my-env-file"}],"relativePath":"guide.md"}',l={name:"guide.md"},o=e(`<h1 id="guide" tabindex="-1">Guide <a class="header-anchor" href="#guide" aria-hidden="true">#</a></h1><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h2><p><a href="https://github.com/iendeavor/import-meta-env/blob/main/LICENSE" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/github/license/iendeavor/import-meta-env?color=blue&amp;label=License" alt="License - MIT"></a></p><p><a href="https://semver.org/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/Sem%20Ver-2.0.0-black.svg" alt="SemVer version"></a></p><p><a href="https://github.com/iendeavor/import-meta-env/actions/workflows/ci.yml" target="_blank" rel="noopener noreferrer"><img src="https://github.com/iendeavor/import-meta-env/actions/workflows/ci.yml/badge.svg" alt="CI"></a></p><h3 id="the-env-example-file" tabindex="-1">The <code>.env.example</code> File <a class="header-anchor" href="#the-env-example-file" aria-hidden="true">#</a></h3><p>For security reasons, we need to explicitly define which environment variables should be exposed to the browser.</p><p>You can do this by creating a <code>.env.example</code> file in your project:</p><div class="language-ini"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># .env.example</span></span>
<span class="line"><span style="color:#F07178;">S3_BUCKET</span><span style="color:#89DDFF;">=</span></span>
<span class="line"></span></code></pre></div><h3 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h3><ol><li><p>Choose a transformation plugin:</p><ul><li>If you&#39;re already using Babel, you can install <a href="#install-babel-plugin">babel plugin</a>.</li><li>If you&#39;re already using Rollup, Vite, or Webpack, you can install <a href="#install-unplugin">unplugin</a>.</li></ul></li><li><p>You will also need to install the <a href="#install-cli">CLI</a> to populate your environment variables after production.</p></li></ol><h4 id="install-babel-plugin" tabindex="-1">Install Babel Plugin <a class="header-anchor" href="#install-babel-plugin" aria-hidden="true">#</a></h4><p><a href="https://www.npmjs.com/package/@import-meta-env/babel" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/babel.svg" alt="NPM version"></a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This plugin is not compatible with the Vite, you should use the <a href="#install-unplugin">Unplugin</a> instead.</p></div><p>Install it with your favorite package manager:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm install @import-meta-env/babel --save-dev</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn add @import-meta-env/babel --dev</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm add -D @import-meta-env/babel</span></span>
<span class="line"></span></code></pre></div><p>Register the plugin:</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// babel.config.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">plugins</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module:@import-meta-env/babel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.env.example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}]]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Related examples: <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/babel-starter-example" target="_blank" rel="noopener noreferrer">babel</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/webpack-babel-loader-example" target="_blank" rel="noopener noreferrer">babel-loader</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/jest-example" target="_blank" rel="noopener noreferrer">jest</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/rollup-plugin-babel-example" target="_blank" rel="noopener noreferrer">rollup-plugin-babel</a></p><h4 id="install-unplugin" tabindex="-1">Install Unplugin <a class="header-anchor" href="#install-unplugin" aria-hidden="true">#</a></h4><p><a href="https://www.npmjs.com/package/@import-meta-env/unplugin" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/unplugin.svg" alt="NPM version"></a></p><p>Install it with your favorite package manager:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm install @import-meta-env/unplugin --save-dev</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn add @import-meta-env/unplugin --dev</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm add -D @import-meta-env/unplugin</span></span>
<span class="line"></span></code></pre></div><p>Register the plugin:</p><p>Rollup:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// rollup.config.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ImportMetaEnvPlugin </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@import-meta-env/unplugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    ImportMetaEnvPlugin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rollup</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">example</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.env.example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>Vite:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ImportMetaEnvPlugin </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@import-meta-env/unplugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    ImportMetaEnvPlugin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">vite</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">example</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.env.example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>Webpack:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@import-meta-env/unplugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">webpack</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">example</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.env.example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>Related examples: <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/rollup-starter-example" target="_blank" rel="noopener noreferrer">rollup</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/vite-starter-example" target="_blank" rel="noopener noreferrer">vite</a>, <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/webpack-starter-example" target="_blank" rel="noopener noreferrer">webpack</a></p><h4 id="install-cli" tabindex="-1">Install CLI <a class="header-anchor" href="#install-cli" aria-hidden="true">#</a></h4><p><a href="https://www.npmjs.com/package/@import-meta-env/cli" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/@import-meta-env/cli.svg" alt="NPM version"></a></p><p>Install it with your favorite package manager:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm install @import-meta-env/cli --save-dev</span></span>
<span class="line"><span style="color:#A6ACCD;">yarn add @import-meta-env/cli --dev</span></span>
<span class="line"><span style="color:#A6ACCD;">pnpm add -D @import-meta-env/cli</span></span>
<span class="line"></span></code></pre></div><h3 id="using-environment-variables" tabindex="-1">Using Environment Variables <a class="header-anchor" href="#using-environment-variables" aria-hidden="true">#</a></h3><p>Suppose you have the following environment variables:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> S3_BUCKET=YOUR_S3_BUCKET</span></span>
<span class="line"></span></code></pre></div><h4 id="accessing-environment-variables" tabindex="-1">Accessing Environment Variables <a class="header-anchor" href="#accessing-environment-variables" aria-hidden="true">#</a></h4><p>You can access the environment variables in code like:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">S3_BUCKET)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-hidden="true">#</a></h4><p>In development, <code>import.<wbr>meta.env</code> will simply be replaced with environment variables.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">YOUR_S3_BUCKET</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="production" tabindex="-1">Production <a class="header-anchor" href="#production" aria-hidden="true">#</a></h4><p>During production, <code>import.<wbr>meta.env</code> will be temporarily replaced with a placeholder string.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__import_meta_env_placeholder__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">S3_BUCKET))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Therefore, before serving your production build, you need to run the CLI to populate the environment variables:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">./node_modules/.bin/import-meta-env --example .env.example</span></span>
<span class="line"></span></code></pre></div><p>... and it will output:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">YOUR_S3_BUCKET</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Since your application may be deployed on a system that doesn&#39;t have Node.js installed, you can use <a href="https://github.com/vercel/pkg" target="_blank" rel="noopener noreferrer">pkg</a> to package the <code>import-meta-env</code> script into a standalone binary.</p><p>For example, you may host your application on the <a href="https://hub.docker.com/_/nginx" target="_blank" rel="noopener noreferrer">Alpine Linux nginx image</a>):</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npx pkg ./node_modules/@import-meta-env/cli/bin/import-meta-env.js \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  --target node16-alpine \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  --output import-meta-env-alpine</span></span>
<span class="line"></span></code></pre></div><p>and use it like above to populate environment variables:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">./import-meta-env-alpine --example .env.example</span></span>
<span class="line"></span></code></pre></div><p>Related examples: <a href="https://github.com/iendeavor/import-meta-env/blob/main/packages/examples/docker-starter-example" target="_blank" rel="noopener noreferrer">docker</a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>Import-meta-env</strong> will also replace all <code>import.<wbr>meta.env</code> appearing in JavaScript strings, so you may see errors like:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">import.<wbr>meta.env.S3_BUCKET is:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">S3_BUCKET)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>will be transformed into:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">__import_meta_env_placeholder__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.S3_BUCKET is:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ^ SyntaxError: missing ) after argument list</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__import_meta_env_placeholder__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">S3_BUCKET</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>To avoid this, you can break the string up with a unicode zero-width space, e.g.:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">import.<wbr>meta</span><span style="color:#A6ACCD;">\\u200b</span><span style="color:#C3E88D;">.env.S3_BUCKET is:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">S3_BUCKET)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>output:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">import.<wbr>meta</span><span style="color:#A6ACCD;">\\u200b</span><span style="color:#C3E88D;">.env.S3_BUCKET is:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__import_meta_env_placeholder__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">S3_BUCKET</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>By default, <strong>import-meta-env</strong> will automatically determine the mode (development or production) and replace <code>import.<wbr>meta.env</code> with environment variables or placeholders, respectively.</p><p>You can override this by setting the <code>shouldInlineEnv</code> option for the <a href="#install-babel-plugin">babel plugin</a> and the <a href="#install-unplugin">unplugin</a>.</p><p>For more information, see <a href="./api.html">API</a>.</p></div><h2 id="extra-topics" tabindex="-1">Extra Topics <a class="header-anchor" href="#extra-topics" aria-hidden="true">#</a></h2><h3 id="local-development" tabindex="-1">Local Development <a class="header-anchor" href="#local-development" aria-hidden="true">#</a></h3><p>In local development, for convenience, you can create a <code>.env.defaults</code> file in the project instead of manipulating environment variables in the system:</p><div class="language-ini"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># Import-meta-env will only load \`S3_BUCKET\`&#39;s value if you only defined it in the \`.env.example\` file.</span></span>
<span class="line"><span style="color:#F07178;">S3_BUCKET</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">YOUR_S3_BUCKET</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">SECRET_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">YOUR_SECRET_KEY_GOES_HERE</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="sensitive-environment-variables" tabindex="-1">Sensitive Environment Variables <a class="header-anchor" href="#sensitive-environment-variables" aria-hidden="true">#</a></h3><p>You may want to define all necessary environment variables in .env.example (i.e. including credentials), in this case, you can creating two example files, and pass the <code>.env.example.public</code> file to <code>import-meta-env</code> options:</p><div class="language-ini"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># .env.example</span></span>
<span class="line"><span style="color:#F07178;">S3_BUCKET</span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">SECRET_KEY</span><span style="color:#89DDFF;">=</span></span>
<span class="line"></span></code></pre></div><div class="language-ini"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># .env.example.public</span></span>
<span class="line"><span style="color:#F07178;">S3_BUCKET</span><span style="color:#89DDFF;">=</span></span>
<span class="line"></span></code></pre></div><p>Or you may write a script to automatically create the <code>.env.example.public</code> file by filtering out the sensitive environment variables, it&#39;s all up to you:</p><div class="language-ini"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># .env.example</span></span>
<span class="line"><span style="color:#F07178;">PUBLIC_S3_BUCKET</span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">SECRET_KEY</span><span style="color:#89DDFF;">=</span></span>
<span class="line"></span></code></pre></div><div class="language-ini"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># .env.example.public</span></span>
<span class="line"><span style="color:#F07178;">PUBLIC_S3_BUCKET</span><span style="color:#89DDFF;">=</span></span>
<span class="line"></span></code></pre></div><p>In addition, you should use <code>process.<wbr>env</code> to access the sensitive environment variables in your code instead of accessing the environment variables by <code>import.<wbr>meta.env</code>, this could help you to identify the sensitive environment variables in your code:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> S3_BUCKET </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">S3_BUCKET</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SECRET_KEY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SECRET_KEY</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>To populate sensitive environment variables, you should still use <a href="https://webpack.js.org/plugins/environment-plugin/" target="_blank" rel="noopener noreferrer">webpack.EnvironmentPlugin</a> or similar:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> webpack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">EnvironmentPlugin</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SECRET_KEY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SECRET_KEY)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;YOUR_SECRET_KEY_GOES_HERE&quot;</span></span>
<span class="line"></span></code></pre></div><p>If you need to populate the sensitive environment variables at run-time, you need to find out another way to do it, for example:</p><ol><li>For <a href="https://nextjs.org/" target="_blank" rel="noopener noreferrer">NEXT.js</a>, you can use <a href="https://nextjs.org/docs/api-reference/next.config.js/runtime-configuration" target="_blank" rel="noopener noreferrer">serverRuntimeConfig</a>.</li><li>For <a href="https://nuxtjs.org/" target="_blank" rel="noopener noreferrer">NuxtJS</a>, you can use <a href="https://nuxtjs.org/docs/configuration-glossary/configuration-runtime-config" target="_blank" rel="noopener noreferrer">privateRuntimeConfig</a>.</li></ol><h3 id="intellisense-for-typescript" tabindex="-1">IntelliSense for TypeScript <a class="header-anchor" href="#intellisense-for-typescript" aria-hidden="true">#</a></h3><p>You may want to get TypeScript IntelliSense for user-defined environment variables.</p><p>To achieve, you can create an <code>env.d.ts</code>, then define <code>ImportMeta</code> like this:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// env.d.ts</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMeta</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">S3_BUCKET</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="framework-specific-notes" tabindex="-1">Framework-specific Notes <a class="header-anchor" href="#framework-specific-notes" aria-hidden="true">#</a></h2><h3 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-hidden="true">#</a></h3><br><h4 id="the-env-variables-and-modes" tabindex="-1">The <a href="https://vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noopener noreferrer">Env Variables and Modes</a> <a class="header-anchor" href="#the-env-variables-and-modes" aria-hidden="true">#</a></h4><p>During production, the following variables will be statically replaced just like Vite:</p><ul><li><p><a href="https://vitejs.dev/guide/env-and-mode.html#env-variables" target="_blank" rel="noopener noreferrer">Built-in</a> variables: <code>MODE</code>, <code>BASE_URL</code>, <code>PROD</code>, and <code>DEV</code>.</p></li><li><p><a href="https://vitejs.dev/guide/ssr.html#conditional-logic" target="_blank" rel="noopener noreferrer">Server-side rendering</a> variable: <code>SSR</code>.</p></li><li><p><a href="https://vitejs.dev/plugins/#vitejs-plugin-legacy" target="_blank" rel="noopener noreferrer">@vitejs/plugin-legacy</a> variable: <code>LEGACY</code>.</p></li><li><p><a href="https://vitejs.dev/config/index.html#envprefix" target="_blank" rel="noopener noreferrer">envPrefix</a> variables. You can disable it by setting <code>envPrefix</code> to <code>[]</code> (<strong>Recommended</strong>).</p></li></ul><h4 id="intellisense-for-typescript-1" tabindex="-1">IntelliSense for TypeScript <a class="header-anchor" href="#intellisense-for-typescript-1" aria-hidden="true">#</a></h4><p>For Vite projects, you can augment <a href="https://vitejs.dev/guide/env-and-mode.html#intellisense-for-typescript" target="_blank" rel="noopener noreferrer">ImportMetaEnv</a> like this:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/env.d.ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">reference</span><span style="color:#89DDFF;font-style:italic;"> </span><span style="color:#C792EA;font-style:italic;">types</span><span style="color:#89DDFF;font-style:italic;">=</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#C3E88D;font-style:italic;">vite/client</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#89DDFF;font-style:italic;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMetaEnv</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">S3_BUCKET</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// more env variables...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMeta</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMetaEnv</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-hidden="true">#</a></h2><h3 id="why-use-importmeta" tabindex="-1">Why use ImportMeta? <a class="header-anchor" href="#why-use-importmeta" aria-hidden="true">#</a></h3><p>Since <code>process.<wbr>env</code> is a Node specific object, we should not use it in browser environment.</p><p>For server-side rendering, it is also more precise to use <code>import.<wbr>meta.env</code> (heavily inspired by Vite) and <code>process.<wbr>env</code> respectively.</p><h3 id="boolean-values" tabindex="-1">Boolean Values <a class="header-anchor" href="#boolean-values" aria-hidden="true">#</a></h3><p>Environment variables are always strings.</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> DEBUG=whatever </span><span style="color:#676E95;font-style:italic;"># true</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> DEBUG= </span><span style="color:#676E95;font-style:italic;"># false</span></span>
<span class="line"></span></code></pre></div><p>The easiest way to do this is to treat <code>&quot;&quot;</code> and <code>undefined</code> as <code>false</code>, otherwise treat them as <code>true</code>:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DEBUG) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DEBUG is anything but the empty string and undefined.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">DEBUG is the empty string.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>If you need to convert it to <code>boolean</code> type:</p><div class="language-diff"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> if (  import.<wbr>meta.env.DEBUG) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;"> if (!!import.<wbr>meta.env.DEBUG === true) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&quot;DEBUG is anything but the empty string and undefined.&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">} else {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&quot;DEBUG is the empty string.&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="changes-to-environment-variables-is-not-updated" tabindex="-1">Changes to environment variables is not updated <a class="header-anchor" href="#changes-to-environment-variables-is-not-updated" aria-hidden="true">#</a></h3><p>You will need to restart your dev server after changing the environment variables.</p><p>This is useful, for example:</p><ul><li>You want to track bugs for production, but you don&#39;t want to shut down the development environment.</li><li>Or, you want to start multiple development environments at the same time and each one has its own environment variables.</li></ul><h3 id="can-i-have-multiple-env-files" tabindex="-1">Can I have multiple <code>.env</code> files? <a class="header-anchor" href="#can-i-have-multiple-env-files" aria-hidden="true">#</a></h3><p>Yes. You can choose which one to be used by passing the <code>env</code> option to <code>import-meta-env</code>, for example, you can pass <code>.env.local</code> to <code>import-meta-env</code>:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">./node_modules/.bin/import-meta-env \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  --env .env.local \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  --example .env.example</span></span>
<span class="line"></span></code></pre></div><h3 id="should-i-commit-my-env-file" tabindex="-1">Should I commit my <code>.env</code> file? <a class="header-anchor" href="#should-i-commit-my-env-file" aria-hidden="true">#</a></h3><p>No. We strongly recommend against committing your <code>.env</code> file to version control.</p>`,110),p=[o];function t(r,c,i,y,D,d){return n(),a("div",null,p)}var v=s(l,[["render",t]]);export{u as __pageData,v as default};
